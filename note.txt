Machine Learning Projects

A.Y. 2024/25

Instructor: Nicolò Cesa-Bianchi

Teaching assistants:

Luigi Foscari (luigi.foscari@unimi.it)
Emmanuel Esposito (emmanuel.esposito@unimi.it)
Evaluation criterion
The evaluation of the project will mostly focus on the correctness and completeness of the methodology employed, rather than on the accuracy of the trained model or training time. The reproducibility of the results and the quality of the report also play a substantial role in the final evaluation.

Deadlines
Students can submit their work by the following fixed deadlines:

25/06/2025
21/07/2025
01/09/2025
20/10/2025
13/02/2026
31/05/2026
Within approximately three to four weeks after each deadline, there will be an oral examination, usually held online but possibly in person upon request, where the project will be thoroughly discussed with the TAs, the students are not required to prepare a presentation of their work.

We stress that group projects are not allowed: students must complete their projects individually.

After having completed the project and having double-checked that all the instructions were followed carefully, the repository with the code must be submitted to this form, note that the review process will start after the first available deadline.

Additional instructions
Read the following instructions carefully.

Besides complying with the project’s specifications, students must follow a sound methodology both in the data preprocessing phase and when running the experiments. In particular, no data manipulation should depend on test set information, and the validation of the performance of each model must use appropriate techniques (e.g., cross-validation).
Hyperparameter tuning should focus on regions of values where performance trade-offs are explicit and should be fully automatic. Instead of simply picking the best hyperparameters, you should apply sound techniques (e.g., grid search with cross-validation) to compute the best hyperparameters and describe this process in the report.
Any implementation must use Python 3 (any other choice must be preliminarily agreed upon with the teaching assistants). Using Python 3 within Jupyter Notebooks is allowed.
The report (in PDF) and the project code must be submitted in a public GitHub/GitLab repository.
The report must be a detailed document (and not slides!) of about 10-15 pages; see further details here.
IMPORTANT: Your report must contain the following declaration:
I declare that this material, which I now submit for assessment, is entirely my own work and has not been taken from the work of others, save and to the extent that such work has been cited and acknowledged within the text of my work. I understand that plagiarism, collusion, and copying are grave and serious offences in the university and accept the penalties that would be imposed should I engage in plagiarism, collusion or copying. This assignment, or any part of it, has not been previously submitted by me or any other person for assessment on this or any other course of study.
[RPS] Building a CNN for Rock-Paper-Scissors Classification


Objectives
Develop a Convolutional Neural Network (CNN) to accurately classify images of hand gestures corresponding to the Rock-Paper-Scissors game.
Follow sound statistical and machine learning practices for data preprocessing, model training, hyperparameter tuning, and evaluation.
Optionally, assess the generalization capabilities of the model using custom images of your own hand gestures.
Given the size of the dataset and the complexity of the task, prioritize achieving a reasonable training time rather than maximizing accuracy.
Dataset
Use the Rock-Paper-Scissors dataset available on Kaggle: Rock-Paper-Scissors Dataset.

Requirements
Your assignment submission must include the following:

Data Exploration and Preprocessing
Explore the dataset thoroughly and provide a summary of your observations.
Perform necessary preprocessing steps:
Image resizing and normalization.
Optionally, data augmentation techniques.
Splitting the data into training and test sets appropriately.
CNN Architecture and Training
Design at least 3 NN architectures with incremental complexity. Evaluate and compare the performance of each one.
Clearly define and justify your CNN architectures (number and types of layers, activation functions, pooling methods, dropout layers).
Train your CNNs using an appropriate optimizer and loss function.
Demonstrate proper hyperparameter tuning (e.g., learning rate, number of epochs, batch size) for at least one of your models.
Evaluation and Analysis
Evaluate your model performance using suitable metrics such as accuracy, precision, recall, and F1-score.
Provide visualizations of training curves (loss and accuracy).
When reasonable, conduct an analysis of misclassified examples to understand potential model limitations.
Discuss the presence or absence of overfitting and underfitting at any point in the training pipeline.
Optional: Generalization Test
Create a small test dataset using your own images (pictures of your hand performing rock, paper, scissors). Disclaimer: These pictures need not be submitted with your project to preserve your privacy. Instead, simply summarize your experimental findings.
Evaluate the trained model's performance on this dataset and analyze its generalization capability.
Tools
You are allowed to use Python libraries such as TensorFlow/Keras or PyTorch for building your CNN.

https://www.kaggle.com/datasets/drgfreeman/rockpaperscissors

original note link : https://docs.google.com/document/d/e/2PACX-1vT01mWqxQKg5PZ0YZAajONDXvy0mNycq5dpxYiUBuqmKdQ4WE9IXLlCjb0ZWgLWLUZwO3MmJ5mBgZ5F/pub